using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using dotnet_cyberpunk_challenge_3_14.malware.lib;
using dotnet_cyberpunk_challenge_3_14.malware.lib._lib;


namespace dotnet_cyberpunk_challenge_3_14.malware
{
    public class ArasakaKuangPrimusMalware : MultiKuangDaemonFamilyBase<ArasakaMessageRoot, ArasakaMessageProcessList> {
        public IceBreakerTunnelConnection<ArasakaMessageRoot> CurrentIceBreakerArasakaTunnelConnection {get;set;}
        public async override Task Initialize()
        {
            await GetCurrentConnection();
        }
    
        public async override Task<string> GetIceTypeOnRemote()
        {
            ArasakaMessageRoot arasakaMessageResponse = await CurrentServerConnection.SendRequest("model-type");
            string modelType = arasakaMessageResponse.content.model;

            string matchedModel = "";
            if (_IsTargetHatichiICE(modelType)){
                matchedModel = "hatachi";
            } else if (_IsTargetHosakaICE(modelType)) {
                matchedModel ="hosaka";
            } else if (_IsTargetKiroshiICE(modelType)) {
                matchedModel = "kiroshi";
            } else {
                matchedModel = "unknown";
            }

            return matchedModel; 
        }

        protected async override Task<List<ArasakaMessageProcessList>> _GetProcessList()
        {
            ArasakaMessageRoot message = await CurrentServerConnection.SendRequest("process-list");
            List<ArasakaMessageProcessList> processList = message.content.processList;
            return processList;
        }


        public async override void IceBreak()
        {
            throw new NotImplementedException();
        }


        // FIXME: DON'T CHANGE - This is still under development
        public async override Task SetupIceBreakerTunnelToTarget()
        {
            CurrentIceBreakerArasakaTunnelConnection  = new IceBreakerTunnelConnection<ArasakaMessageRoot>();
            await CurrentIceBreakerArasakaTunnelConnection .Initialize();
        }

        public async override Task<IEnumerable<string>> GetProcessMemoryMapping()
        {
            List<ArasakaMessageProcessList> arasakaMessageProcessLists = await GetProcessList();
            return arasakaMessageProcessLists.Select(pl => pl.memoryStartingAddress);
        }
    }
}